# -*- coding: utf-8 -*-
"""kg_pathway_protein.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FW8S8Vzc_y6TIqH0-MolbKLo_ISL8QB7
"""



##!pip install neo4j py2neo

import pandas as pd
from py2neo import Graph, Node, Relationship

# Connect to Neo4j
##graph = Graph("neo4j+s://ef67c00f.databases.neo4j.io", auth=("neo4j", "lz9BSl0i9jJ2XJyLIN3oqH54M-GQBLmU3YMxnITWsrs"))
graph = Graph(Neo4j-instance, auth=(username, password))

# Read data from kg_giant_no_disease.csv
df = pd.read_csv('kg_giant_disease_disease.csv', low_memory=False)

# Function to create or get a node
def get_or_create_node(label, name, source):
    # Check if the node exists
    query = f"MATCH (n:{label}) WHERE n.name = $name AND n.source = $source RETURN n"
    result = graph.run(query, name=name, source=source)
    existing_node = result.data()

    if existing_node:
        return existing_node[0]['n']
    else:
        # Create a new node
        node = Node(label, name=name, source=source)
        graph.create(node)
        return node

# Iterate over rows and create nodes and relationships
for _, row in df.iterrows():
    # Get or create nodes
    x_node = get_or_create_node(row['x_type'], row['x_name'], row['x_source'])
    y_node = get_or_create_node(row['y_type'], row['y_name'], row['y_source'])

    # Create relationship with the value from the display_relation column
    relationship = Relationship(x_node, row['display_relation'], y_node)

    # Merge relationship
    graph.merge(relationship)